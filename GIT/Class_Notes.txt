#######
DAY-1
#######

		Intro to DevOps ????
		
		What & Why DevOps ?
		
		Evolution of DevOps 
		
			SDLC Process ????
			
				Software Development Life Cycle!
				
				 Phases of SDLC :		Water Fall Model-!!! - Linear Approach
				 
					Requirement Anaysis
					Design
					Code/Development
					Testing
					Deployment
					Monitoring...
					
					New CR !
					
					Requirement Anaysis
					Design
					Code/Development
					Testing
					Deployment
					Monitoring...
										
			
		Desktop Application! 
		
			Monolith Application Architecture!!!			---> The whole application is developed as one service

					Services/Functions ::: One whole Appln.

						Sign-Up 					- Developer1 - Test -- Cannot Deploy to prod. 
						Sign-In 
						Search for product 
						Add to cart 
						Place the order
						Payment 
						Confirm the order 
						Track
	
			Micro-Service Based Application Architecture!!!!
						--->  Each function the the application is developed as a individual service.
						---> It is a smallest unit of task.
			
www.amazon.com ---> E-Commerce Portal

Services/Functions :::

	Sign-Up 					- Developer1 - Test - Deployment  - service1 -- Business Logics
	Sign-In 														service2
	Search for product 
	Add to cart 
	Place the order
	Payment 
	Confirm the order 
	Track
	
	
New E-Commerce protal!!! 

		Appln. Architect.
		
	
	Agile Methodology :::
	
		== > Any Developers can work on their module -- test -->
		
			Continuous Integration
			
			Continuous Delivery
			
	
	www.amazon.com ---> E-Commerce Portal
	Netflix
	Facebook
	google

	
			Continuous Deployment 
		
		
	DevOps ::: 
	
	
		Continuous Development		-->  IDE - Eclipse based IDEs - VSCode.
			Developer --> 	Java web application -- Build(Compile the src code & Create Artifacts(Binaries *.war))
							Unit Testing 
							Promote the Code to Higher Environment for further Testing.
		Continuous Integration
							Integration of Application Artifacts for further Testing
							Testing :
								QA	Quality Assurance	--> Func, Reg, 
								UAT User Acceptance Testing 	
		Prod. Deployment :
			Continuous Delivery		---> 	Manual Approval before prod implementation.
											Critical Appln Need approval from various stake holders (Security Team)
											
			Continuous Deployment	---> 	Auto Approval is done for any Prod implementation.	
		
		Continuous Monitoring
	
	
	
	DevOps ::::
	
		Tools - GIT, Jenkins, Ansible, Docker , Kubernetes, Testing tools  
	
	
	
Telecomm service providers ....

Provider1 -- Introduce a new scheme!


Provider2 -- Introduce a new scheme!


	Continuous Deployment  ==> is considered one of the matured level of DevOps.
	
	
		DevOps :::
					People  !!!! dev, testing, rel. security team 
					Process 		Define Devops Strategies! --> 
					Tools 	GIT, Jenkins, Ansible, Docker , Kubernetes, Testing tools, Terraform 	
	
	
	Roles & Responsibilities of DevOps Team : DevOps Admin/Engg. !!!!
	
		Infra-structure Team 			-- Provision the Infra-structure & Config the Servers.
		Dev Team						-- Code & Build -- Jenkins & build tools 
		Testing Team					-- Testing 	--	Jenkins to integrate selenium 
		Release Management Team 		-- Ensure timely product release	- Jenkins  
		Security Team					
			-- Ensure that the project is developed and delivered as per companies security policies & Comp. 
			
	DevOps Team : 
		Role of DevOps - to create colaboration of all the teams 

Summary :::

		About SDLC , Waterfall & Agile 
		Intro to DevOps 
		Various DevOps Strategies 
		
	Waterfall , Agile , DevOps , DevSecOps, SRE, GitOps, AIOps...
	
		
		
######
DAY-2
######

	DevOps Process 
	
	DevOps Tools ::::
		Tools Adoption :::
		
			Self-Managed Tools -- Open-Source Tools 
				git, jenkins, ansible, terraform, docker, kubernetes.......
			
			Managed Tools -- Managed by the Cloud Service Providers.
				AWS, Azure, GCP


			My Lab - LMS ==>  
			
			AWS -- Create a Free Tier Account 
			Create EC2 Instances -- Virtual Machines
			Start installing and working on all the open source devops tools. 
				
	DevOps Team :::
	
		few members -- Admin GIT servers
		3 members -- Jenkins Server 
		
	Dev & Testing Team  on DevOps Tools 
	
	DevOps Life Cycle ::
	
		Planning :::
		
			ALM Tools -- Application LifeCycle Management Tool.
				Jira 
				Azure DevOps Service 
					Azure Boards 
					
		Why DevOps team need IDEs ?? - Integrated Development Environment . Eg.: Eclipse, Visual Studio Code.
					- IDEs has very good integration with many other tools.
							Integrate GIT with Eclipse 
					
			Writing some Automation Scripts!
					Automate Deployment 
					Automate Build 	    Build(Compile the src code & Create Artifacts(Binaries *.war))				- 
					Automate Infra- provisioning 
					Automate Config Management 
					
			Scipting Languages ::: Shell scripts, Groovy Scripts, yaml scripts, python scripts. 
						
						Build Automation 
						Deployment Automation 
						Test Automation  
						Monitoring CLI Scipts ===>>> 
						
							Infra-structure ---> Prod. Server for Memory Utilization 
								Limit --> 80% of utilization --> Create Email-Alert to Infra Team.
								Script --> 	Automatically Cleanup the server / Deletes all the unwanted files. (or) Add More Volumes.
								Add More prod. servers -- Load Balancing.... 
								
			
		Jenkins -- Build orchestration Tool :::
		Bamboo
		gitlab-ci
		
		azure pipeline
		aws pipeline 
		
	
	Non-Prod Environment									Prod-Environment
		DEV Environment											Prod - Servers 
		Testing Environments
			QA 
			UAT
			Pre-Prod / Staging Environment
		
	
	
	Deployment Workflow : 
	
		DEV --> QA --> UAT --> Pre-Prod 	------------> 		PROD. 
		
	Unit Testing -- Process - done by developers 
	
	
	What is DevOps?
	What are the various DevOps Stages ?
	What the DevOps Tools ?
	
	What is the role of DevOps Team - Engg., Architect, Admins
		--> DevOps Team supports all other teams(dev,testing, rel...) to automate their workflow. 
		--> DevOps Engg. 
				key responsibility to implement devops 
					Write the automation scripts 
					Admin 
	
	Release : -->
	
	Deployment --> 
	Release is actually refers to Prod deployment.
		jdk1.7 
		, 1.8 
	
	
	artifacts --> (*.war)	
		Containers --> is package of application artifacts along with its dependencies.
			Docker Containers 
	
	Matured DevOps Implementation --- Fully Automated CI/CD Pipeline.
	
	Nagios 				
	AppDynamics 
	
	
Version Control System Using GIT :::

		Fork --> is a process of copying the remote src code repo.
		
		Lab Session :::
			
			AWS - Cloud 
			Create AWS Free Tier Account. ==>
			
			Create VMs 
			
			Github Account: --> Remote Source Repository 
			
			Dockerhub account : 
			
		
########
DAY-3
########			
		
			Version Control System Using GIT :::
			
		-	How to access aws console
		-	AWS console UI 
		- 	Create EC2 Instance - Virtual Machine 
		- 	How to access AWS EC2 Instances from external Machines
				SSH Client - 
					putty 			-- *.ppk
					https://www.putty.org/
					MobaXterm		-- *.pem
					https://mobaxterm.mobatek.net/download.html
		- 	How to Connect ?
				- 	Using EC2 Instance Connect!
				-	Using SSH Clients like MobaXterm 
		-	How to Install the required DevOps Tools 
				GIT 
		- 	Fundamentals of VCS & GIT
		-	GIT Commands
		
		
		
		AWS Console ::
		
			AWS Services :
				
		On-premises Environment 
		
		
		E-Commerce 
				Development my web application.
					Infra - : Dev Servers 
				Testing the application
					Test Servers 
				Release the application
					Prod Servers 
		
		Cloud Services :::
			AWS / MS Azure / GCP 
			
			Virtual Machines!
				EC2 Instance 
			
			Regions
				Availability zones 
					VM1
					VM2
					
		Containers!!!!
			
		Managed Services 			-- by Cloud Providers
		
		Self-Managed Services
		
		
		Dev_Server ::::		
		
			is a computing device.
				CPU/RAM/Memory
			needs Operating System 
			Linux OS.			-- is a Open Source. 
				Distributions !!!!
					Debian
						Ubuntu
					Fedora
						RHEL
						Centos
						Amazon Linux 		- ec2-user is a default user.			
			
		Windows OS in my laptop :::
		
		  Linux Adminstration Course !
		  
		  Hypervisor --> VM in my laptop.
		  
		Cloud service provider!
		
		AMI - Amazon Machine Image!
		
		Key Pair :::
		
			Is used to authenticate the user login.
			
			Tasks :::
				Launch EC2 Instance 
				Connect using Ec2 Instance Connect 
				Download MobaXterm & Access Ec2 Instance thru MobaXterm
				Cover Linux Basic Commands!
		
		GIT -- > Install GIT.
		
		Package Manager -- 
			yum		- Fedora 
			apt-get - Debian 
			rpm
			amazon-linux-extras 
		
		This can be done only as a root user. - Administration
			
		Install GIT ::: 
		
		Amazon Linux-2 : yum install git
		
		Continuous Development ==> Developers IDEs / GIT 
		
		Continuous Integration ==> 
		
			Remote GIT Repository --> Github
			
			
		Windows - 
		
			
		New Project 
		Change Requests
		Bug fixing 
		
		Source Code Repository ::
		
			Local Repository				Remote Repository
			
		
		
		
	Developers' Perspective 
		IDEs --> Java Appln. -- Eclipse based IDEs 
				 Pycharm
				 Visual Studio - .Net 
				 
				 Visual Studio Code --> Open Source IDE
				 
	
	DevOps Perspective
	
				Visual Studio Code --> Open Source IDE
				
				 create some automation scripts --> 
				 
				 Integration to Any Remote Repositories == github/az-repo/gitlab
				 AWS -- -- AWS CLI 
				 Infra-provisioning -- Cloud formation / terraform
		
#########
DAY-4
#########

		Version Control System :::
		
			Source Code :: 
				Java, python, nodejs, .net .....
				
			Developer1 : sign-in.java ---> perform build, create artifacts -- Test his changes .
			
				signin.java 10 lines of code --->  	assign a version number -- v1.0
				signin.java +10 lines of code ---> v1.2
				signin.java +10 lines of code ---> v1.3
		
		
			Versioning helps track the changes .
			
		Version Control System	
			it assigns unique version number / tags / commit_id
			it is used to track the changes.
			
		groovy script -- 
		
		
		Developer1  
		
		-	create any program, version control it -- used Local Version control system.
		
		
		Developer2 
		
		-	
		
		
		
		
		signin.java ---> Git repository  
			5lines -- v1.0
			+5		-- v1.1
			
		*****Branching! DVCS git
		
			signin.java  		developer1 
			
		
			signin.java  		developer2		
		
		
		Enable parallel development without impacting others == Branch 
		
		
		GIT :
			Open-Source DVCS 
			It is used to track the changes.
			Version control the src code changes.
			Enables parallel development without impacting others.
		
		GIT Concepts :::
		
			Git Workflow 
				Local Repository 			Remote Repository(Github,gitlab,azure Repos)
				
				
				
				
			Git Branching Strategies
			
			Handle remote repos.
			
					
		New Project 		-- > 
			Created in his local machine & Version controlled, pushed into remote repository
		
		Change Requests		-- > 
			Clone/fetch the remote repository, work on the changes in local machine, push the changes back to remote repository
		
		Bug fixing
			Clone/fetch the remote repository, work on the changes in local machine, push the changes back to remote repository			
			
			
		
		git add 
		git commit		==> commit the changes into local repo and assigns unique commit id.
		
		git clone			==> is used to copy/clone the entire remote repository into local machine 
		git fetch & pull 	==> are used to get the incremental changes from remote repository into local.
		git fetch	
			==> checks for the incremental changes in remote repo and updates corresponding changes in local repo
			
		git pull 
			==> checks for the incremental changes in remote repo and updates corresponding changes in local repo as well as in the working directory

				git pull = fetch+merge	
				
		git merge/checkout
		
		fork 		==> is used to copy/clone the entire remote repositories in remote server
		
		
	Demo ::
		install git -- windows/linux/mac 
		
		Install git in Windows OS ::: git bash(CLI) & git gui
		Install git in Mac/Linux  ::: CLI 
		
			yum install git
			
			Create local repositories
			
			git init ==> Used to initilize a fresh local git repository
			
			Folder Structure!!!!
			
				GIT-Projects
					repository1
						git init 
			
			git is used for tracking the changes, version control .
				s1.java 
				
				
					the user name
					user ID 
			
			
			Do some git config ::
				update git with valid userName, Email_ID
			
			git config --global user.email "***********@gmail.com"
			git config --global user.name "XXXXX"
			
			git status
		
			git init ==> used to initilize a fresh local git repository & create a default master branch
	
			HEAD ptr ==> always points to the lastest commit of the current branch.	

    1  yum install git
    2  git --version
    3  clear
    4  ls
    5  mkdir git-projects
    6  cd git-projects/
    7  pwd
    8  mkdir repo1
    9  ls
   10  cd repo1/
   11  pwd
   12  ls 
   13  ls -a
   14  git init
   15  ls
   16  ls -a
   17  cd .git/
   18  ls
   19  pwd
   20  clear
   21  pwd
   22  cd ..
   23  pwd
   24  ls
   25  git config --global user.name "Loksai"
   26  git config --global user.email "loksai.eta@gmail.com"
   27  ls
   28  git status
   29  clear
   30  echo "Hello Team"
   31  pwd
   32  echo "Hello Team" >> file1.txt
   33  ls
   34  cat file1.txt 
   35  git status
   36  git add file1.txt
   37  git status
   38  git commit -m "Initial Commit Message"
   39  git status
   40  ls
   41  ls -a
   42  git log
   43  echo "rec1" >> file2.txt
   44  git status
   45  git add file2.txt 
   46  git status
   47  git commit -m "commit message 2"
   48  git status
   49  git log
   50  history	
   
   
  excellent -- exxxxxxxxxxxxxxxxxxxxxxxxxcellent = 1   
  good   0
  average -1

#########
 DAY - 5 
##########

		working directory	<--->		Staging Area	<--->	Local Repo 			<-------->		Remote Repository
		
		file1.txt			git add 					commit	file.txt					push 
		file1.txt						file1.txt
		file1.txt
		file1.txt
		file1.txt
		file1.txt
	
	
	Incremental Changes :::
	
		Remote repo : 10files + 2 more files
		
			Clone : 
			fetch/pull : 
	
	
	git status ???
		Working Tree is Clean or NOT!!!!
	git log ???
		commit Id , HEAD, Identity, date, commit_msg 
	
	
	git add . 
	git add <file_name>
	git add *.md
	
	git log -2
	git log --oneline 
	git log --stat
	
	GIT Ignore!!!!!!
	
		DVCS -- GIT 
		
		Used to version control the source codes!!!!
					Working Dir.							Staging				Local Repo 			===> 	Remote repo.
					
		Folder :	Java-Web-appln-Project	
							index.java 
							signin.java					====> read userinput, process, update the database.
							validate.java 
							unittestcase.md
							readme.doc 
							javaapp.war							
							credentials
							secrets 
							
	
Summary :::

	git log 
	git status
	git diff
	.gitignore
	
  500  git --version
  501  cd d:
  502  mkdir Jan30Batch
  503  cd Jan30Batch/
  504  ls
  505  mkdir repo1
  506  cd repo1/
  507  clear
  508  git init
  509  ls
  510  ls -a
  511  echo "rec1" >> file1.txt
  512  git status
  513  git add file1.txt
  514  git status
  515  git commit -m "CM1"
  516  git status
  517  git log
  518  clear
  519  ls
  520  cd ..
  521  ls
  522  mkdir testrepo1
  523  cd testrepo1/
  524  ls
  525  clear
  526  ls -a
  527  git init
  528  ls -a
  529  echo "rec1" >> file1.txt
  530  git status
  531  git add file1.txt
  532  git commit -m "Initial Commit"
  533  clear
  534  git status
  535  git log
  536  git status
  537  ls
  538  git file2.txt
  539  git --help
  540  clear
  541  ls
  542  echo "rec1" >> file2.txt
  543  git add file2.txt
  544  git commit -m "CM1"
  545  git status
  546  git log
  547  clear
  548  git status
  549  cd ..
  550  mkddir testrepo2
  551  mkdir testrepo2
  552  cd testrepo2
  553  git status
  554  ls -a
  555  echo "rec1" >> file1.txt
  556  git status
  557  git add file1.txt
  558  git init
  559  git status
  560  git add file1.txt
  561  git commit -m "CM1"
  562  git status
  563  clear
  564  echo "rec1" >> f1.txt
  565  echo "rec1" >> f2.txt
  566  echo "rec1" >> f3.txt
  567  git status
  568  git add .
  569  git status
  570  git commit -m "CM2"
  571  git status
  572  echo "rec1" >> s1.java
  573  echo "rec1" >> s2.java
  574  echo "rec1" >> s2.md
  575  echo "rec1" >> s3.md
  576  git status
  577  git add *.java
  578  git status
  579  git add *.md
  580  git status
  581  git commit -m "CM3"
  582  git status
  583  git log
  584  git log --oneline
  585  git log --stat
  586  git log --oneline
  587  git log -2
  588  clear
  589  git log --oneline -2
  590  git log --stat -2
  591  git log --stat
  592  git log e6aec68
  593  clear
  594  git log --oneline
  595  git log --stat 0015d69
  596  clear
  597  git status
  598  ls
  599  cat s1.java
  600  echo "rec2" >> s1.java
  601  echo "rec3" >> s1.java
  602  cat s1.java
  603  clear
  604  cat s1.java
  605  git status
  606  git diff
  607  git add .
  608  git status
  609  git diff
  610  git diff --cached
  611  git diff --name-only --cached
  612  clear
  613  git diff --cached
  614  git diff --name-only --cached
  615  git status
  616  git commit -m "CM4"
  617  clear
  618  cat s1.java
  619  git status
  620  echo "record4" >> s1.java
  621  git status
  622  git diff
  623  git add .
  624  git diff --cached
  625  git diff --name-only --cached
  626  clear
  627  git status
  628  git commit -m "CM5"
  629  git status
  630  git log --oneline
  631  git log --oneline -2
  632  git diff b6c480b 040c808
  633  git diff HEAD
  634  clear
  635  git log --oneline
  636  cd ..
  637  mkdir testrepo3
  638  cd testrepo3
  639  clear
  640  git init
  641  vi .gitignore
  642  cat .gitignore
  643  git status
  644  git add .
  645  git commit -m "Created .GITIGNORE FILE"
  646  git status
  647  clear
  648  ls
  649  ls -a
  650  echo "afdasdfsdf" > s1.java
  651  echo "afdasdfsdf" > s2.java
  652  echo "afdasdfsdf" > c1.txt
  653  echo "afdasdfsdf" > c2.txt
  654  echo "afdasdfsdf" > a1.doc
  655  echo "afdasdfsdf" > q1.md
  656  echo "afdasdfsdf" > sample1.txt
  657  ls
  658  cat .gitignore
  659  git add .
  660  git status
  661  git commit -m "CM1"
  662  history
	
	
